{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/tianyangkevinhuang/ssac-code?scriptVersionId=106458683\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown","outputs":[],"execution_count":0},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-09-25T00:06:20.868631Z","iopub.execute_input":"2022-09-25T00:06:20.869486Z","iopub.status.idle":"2022-09-25T00:06:20.888514Z","shell.execute_reply.started":"2022-09-25T00:06:20.869443Z","shell.execute_reply":"2022-09-25T00:06:20.887539Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/nba-players-stats/Players.csv\n/kaggle/input/nba-players-stats/Seasons_Stats.csv\n/kaggle/input/nba-players-stats/player_data.csv\n/kaggle/input/ssacdata/.csv\n/kaggle/input/nba-player-stats/2021-2022 NBA Player Stats - Regular.csv\n/kaggle/input/nba-player-stats/2021-2022 NBA Player Stats - Playoffs.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"regular = pd.read_csv(\"../input/ssacdata/.csv\",encoding=\"UTF-8\")\nregular.info()","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:20.890817Z","iopub.execute_input":"2022-09-25T00:06:20.891441Z","iopub.status.idle":"2022-09-25T00:06:20.95592Z","shell.execute_reply.started":"2022-09-25T00:06:20.891406Z","shell.execute_reply":"2022-09-25T00:06:20.954937Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 812 entries, 0 to 811\nData columns (total 50 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Rk      812 non-null    int64  \n 1   Player  812 non-null    object \n 2   Pos     812 non-null    object \n 3   Age     812 non-null    int64  \n 4   Tm      812 non-null    object \n 5   G       812 non-null    int64  \n 6   GS      812 non-null    int64  \n 7   MP      812 non-null    float64\n 8   FG      812 non-null    float64\n 9   FGA     812 non-null    float64\n 10  FG%     797 non-null    float64\n 11  3P      812 non-null    float64\n 12  3PA     812 non-null    float64\n 13  3P%     740 non-null    float64\n 14  2P      812 non-null    float64\n 15  2PA     812 non-null    float64\n 16  2P%     784 non-null    float64\n 17  eFG%    797 non-null    float64\n 18  FT      812 non-null    float64\n 19  FTA     812 non-null    float64\n 20  FT%     715 non-null    float64\n 21  ORB     812 non-null    float64\n 22  DRB     812 non-null    float64\n 23  TRB     812 non-null    float64\n 24  AST     812 non-null    float64\n 25  STL     812 non-null    float64\n 26  BLK     812 non-null    float64\n 27  TOV     812 non-null    float64\n 28  PF      812 non-null    float64\n 29  PTS     812 non-null    float64\n 30  PER     812 non-null    float64\n 31  TS%     799 non-null    float64\n 32  3PAr    797 non-null    float64\n 33  FTr     797 non-null    float64\n 34  ORB%    812 non-null    float64\n 35  DRB%    812 non-null    float64\n 36  TRB%    812 non-null    float64\n 37  AST%    812 non-null    float64\n 38  STL%    812 non-null    float64\n 39  BLK%    812 non-null    float64\n 40  TOV%    799 non-null    float64\n 41  USG%    812 non-null    float64\n 42  OWS     812 non-null    float64\n 43  DWS     812 non-null    float64\n 44  WS      812 non-null    float64\n 45  WS/48   812 non-null    float64\n 46  OBPM    812 non-null    float64\n 47  DBPM    812 non-null    float64\n 48  BPM     812 non-null    float64\n 49  VORP    812 non-null    float64\ndtypes: float64(43), int64(4), object(3)\nmemory usage: 317.3+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"regular.describe()\nregular[:10]","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:20.957502Z","iopub.execute_input":"2022-09-25T00:06:20.958147Z","iopub.status.idle":"2022-09-25T00:06:21.099899Z","shell.execute_reply.started":"2022-09-25T00:06:20.958111Z","shell.execute_reply":"2022-09-25T00:06:21.098717Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Rk                    Player Pos  Age   Tm   G  GS    MP   FG   FGA  ...  \\\n0   1          Precious Achiuwa   C   22  TOR  73  28  23.6  3.6   8.3  ...   \n1   2              Steven Adams   C   28  MEM  76  75  26.3  2.8   5.1  ...   \n2   3               Bam Adebayo   C   24  MIA  56  56  32.6  7.3  13.0  ...   \n3   4              Santi Aldama  PF   21  MEM  32   0  11.3  1.7   4.1  ...   \n4   5         LaMarcus Aldridge   C   36  BRK  47  12  22.3  5.4   9.7  ...   \n5   6  Nickeil Alexander-Walker  SG   23  TOT  65  21  22.6  3.9  10.5  ...   \n6   6  Nickeil Alexander-Walker  SG   23  NOP  50  19  26.3  4.7  12.6  ...   \n7   6  Nickeil Alexander-Walker  SG   23  UTA  15   2   9.9  1.1   3.2  ...   \n8   7             Grayson Allen  SG   26  MIL  66  61  27.3  3.9   8.6  ...   \n9   8             Jarrett Allen   C   23  CLE  56  56  32.3  6.6   9.7  ...   \n\n   TOV%  USG%  OWS  DWS   WS  WS/48  OBPM  DBPM  BPM  VORP  \n0  11.3  18.5  0.4  2.1  2.5  0.070  -2.0  -0.6 -2.6  -0.2  \n1  19.6  12.0  3.8  3.0  6.8  0.163   1.0   1.0  2.0   2.0  \n2  14.4  25.0  3.6  3.5  7.2  0.188   1.7   2.1  3.8   2.7  \n3   9.9  18.4 -0.1  0.4  0.3  0.044  -4.2  -1.5 -5.7  -0.3  \n4   8.0  22.4  2.1  1.0  3.1  0.141   1.3  -0.6  0.7   0.7  \n5  11.3  24.1 -1.1  1.1  0.1  0.003  -1.8  -1.1 -2.9  -0.3  \n6  11.2  24.8 -1.1  0.9 -0.1 -0.005  -1.7  -1.3 -3.0  -0.3  \n7  13.1  17.9  0.0  0.2  0.2  0.070  -2.9   1.2 -1.7   0.0  \n8   6.7  15.2  2.8  1.4  4.2  0.110   0.6  -0.2  0.4   1.1  \n9  12.7  18.1  5.4  3.0  8.5  0.225   2.7   1.2  3.9   2.7  \n\n[10 rows x 50 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rk</th>\n      <th>Player</th>\n      <th>Pos</th>\n      <th>Age</th>\n      <th>Tm</th>\n      <th>G</th>\n      <th>GS</th>\n      <th>MP</th>\n      <th>FG</th>\n      <th>FGA</th>\n      <th>...</th>\n      <th>TOV%</th>\n      <th>USG%</th>\n      <th>OWS</th>\n      <th>DWS</th>\n      <th>WS</th>\n      <th>WS/48</th>\n      <th>OBPM</th>\n      <th>DBPM</th>\n      <th>BPM</th>\n      <th>VORP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Precious Achiuwa</td>\n      <td>C</td>\n      <td>22</td>\n      <td>TOR</td>\n      <td>73</td>\n      <td>28</td>\n      <td>23.6</td>\n      <td>3.6</td>\n      <td>8.3</td>\n      <td>...</td>\n      <td>11.3</td>\n      <td>18.5</td>\n      <td>0.4</td>\n      <td>2.1</td>\n      <td>2.5</td>\n      <td>0.070</td>\n      <td>-2.0</td>\n      <td>-0.6</td>\n      <td>-2.6</td>\n      <td>-0.2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Steven Adams</td>\n      <td>C</td>\n      <td>28</td>\n      <td>MEM</td>\n      <td>76</td>\n      <td>75</td>\n      <td>26.3</td>\n      <td>2.8</td>\n      <td>5.1</td>\n      <td>...</td>\n      <td>19.6</td>\n      <td>12.0</td>\n      <td>3.8</td>\n      <td>3.0</td>\n      <td>6.8</td>\n      <td>0.163</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Bam Adebayo</td>\n      <td>C</td>\n      <td>24</td>\n      <td>MIA</td>\n      <td>56</td>\n      <td>56</td>\n      <td>32.6</td>\n      <td>7.3</td>\n      <td>13.0</td>\n      <td>...</td>\n      <td>14.4</td>\n      <td>25.0</td>\n      <td>3.6</td>\n      <td>3.5</td>\n      <td>7.2</td>\n      <td>0.188</td>\n      <td>1.7</td>\n      <td>2.1</td>\n      <td>3.8</td>\n      <td>2.7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Santi Aldama</td>\n      <td>PF</td>\n      <td>21</td>\n      <td>MEM</td>\n      <td>32</td>\n      <td>0</td>\n      <td>11.3</td>\n      <td>1.7</td>\n      <td>4.1</td>\n      <td>...</td>\n      <td>9.9</td>\n      <td>18.4</td>\n      <td>-0.1</td>\n      <td>0.4</td>\n      <td>0.3</td>\n      <td>0.044</td>\n      <td>-4.2</td>\n      <td>-1.5</td>\n      <td>-5.7</td>\n      <td>-0.3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>LaMarcus Aldridge</td>\n      <td>C</td>\n      <td>36</td>\n      <td>BRK</td>\n      <td>47</td>\n      <td>12</td>\n      <td>22.3</td>\n      <td>5.4</td>\n      <td>9.7</td>\n      <td>...</td>\n      <td>8.0</td>\n      <td>22.4</td>\n      <td>2.1</td>\n      <td>1.0</td>\n      <td>3.1</td>\n      <td>0.141</td>\n      <td>1.3</td>\n      <td>-0.6</td>\n      <td>0.7</td>\n      <td>0.7</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>Nickeil Alexander-Walker</td>\n      <td>SG</td>\n      <td>23</td>\n      <td>TOT</td>\n      <td>65</td>\n      <td>21</td>\n      <td>22.6</td>\n      <td>3.9</td>\n      <td>10.5</td>\n      <td>...</td>\n      <td>11.3</td>\n      <td>24.1</td>\n      <td>-1.1</td>\n      <td>1.1</td>\n      <td>0.1</td>\n      <td>0.003</td>\n      <td>-1.8</td>\n      <td>-1.1</td>\n      <td>-2.9</td>\n      <td>-0.3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>Nickeil Alexander-Walker</td>\n      <td>SG</td>\n      <td>23</td>\n      <td>NOP</td>\n      <td>50</td>\n      <td>19</td>\n      <td>26.3</td>\n      <td>4.7</td>\n      <td>12.6</td>\n      <td>...</td>\n      <td>11.2</td>\n      <td>24.8</td>\n      <td>-1.1</td>\n      <td>0.9</td>\n      <td>-0.1</td>\n      <td>-0.005</td>\n      <td>-1.7</td>\n      <td>-1.3</td>\n      <td>-3.0</td>\n      <td>-0.3</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>6</td>\n      <td>Nickeil Alexander-Walker</td>\n      <td>SG</td>\n      <td>23</td>\n      <td>UTA</td>\n      <td>15</td>\n      <td>2</td>\n      <td>9.9</td>\n      <td>1.1</td>\n      <td>3.2</td>\n      <td>...</td>\n      <td>13.1</td>\n      <td>17.9</td>\n      <td>0.0</td>\n      <td>0.2</td>\n      <td>0.2</td>\n      <td>0.070</td>\n      <td>-2.9</td>\n      <td>1.2</td>\n      <td>-1.7</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>7</td>\n      <td>Grayson Allen</td>\n      <td>SG</td>\n      <td>26</td>\n      <td>MIL</td>\n      <td>66</td>\n      <td>61</td>\n      <td>27.3</td>\n      <td>3.9</td>\n      <td>8.6</td>\n      <td>...</td>\n      <td>6.7</td>\n      <td>15.2</td>\n      <td>2.8</td>\n      <td>1.4</td>\n      <td>4.2</td>\n      <td>0.110</td>\n      <td>0.6</td>\n      <td>-0.2</td>\n      <td>0.4</td>\n      <td>1.1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>8</td>\n      <td>Jarrett Allen</td>\n      <td>C</td>\n      <td>23</td>\n      <td>CLE</td>\n      <td>56</td>\n      <td>56</td>\n      <td>32.3</td>\n      <td>6.6</td>\n      <td>9.7</td>\n      <td>...</td>\n      <td>12.7</td>\n      <td>18.1</td>\n      <td>5.4</td>\n      <td>3.0</td>\n      <td>8.5</td>\n      <td>0.225</td>\n      <td>2.7</td>\n      <td>1.2</td>\n      <td>3.9</td>\n      <td>2.7</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 50 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\nregular[\"PER\"].hist()","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:21.101092Z","iopub.execute_input":"2022-09-25T00:06:21.101441Z","iopub.status.idle":"2022-09-25T00:06:21.344573Z","shell.execute_reply.started":"2022-09-25T00:06:21.101408Z","shell.execute_reply":"2022-09-25T00:06:21.343327Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"print(regular[\"PER\"].max())","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:21.348248Z","iopub.execute_input":"2022-09-25T00:06:21.349282Z","iopub.status.idle":"2022-09-25T00:06:21.356724Z","shell.execute_reply.started":"2022-09-25T00:06:21.349233Z","shell.execute_reply":"2022-09-25T00:06:21.354721Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"76.2\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import train_test_split\nrtrain, rtest = train_test_split(regular, test_size=0.2, random_state=42)\nlen(rtrain)\nlen(rtest)","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:21.358269Z","iopub.execute_input":"2022-09-25T00:06:21.359448Z","iopub.status.idle":"2022-09-25T00:06:21.967437Z","shell.execute_reply.started":"2022-09-25T00:06:21.359411Z","shell.execute_reply":"2022-09-25T00:06:21.966442Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"163"},"metadata":{}}]},{"cell_type":"code","source":"physique = pd.read_csv(\"../input/nba-players-stats/player_data.csv\")\nphysique.info()\nregular.info()\nregular[\"height\"] = \"\"\nregular.columns.get_loc (\"height\")","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:39:45.358653Z","iopub.execute_input":"2022-09-25T00:39:45.359106Z","iopub.status.idle":"2022-09-25T00:39:45.404066Z","shell.execute_reply.started":"2022-09-25T00:39:45.359071Z","shell.execute_reply":"2022-09-25T00:39:45.402679Z"},"trusted":true},"execution_count":71,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4550 entries, 0 to 4549\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   name        4550 non-null   object \n 1   year_start  4550 non-null   int64  \n 2   year_end    4550 non-null   int64  \n 3   position    4549 non-null   object \n 4   height      4549 non-null   object \n 5   weight      4544 non-null   float64\n 6   birth_date  4519 non-null   object \n 7   college     4248 non-null   object \ndtypes: float64(1), int64(2), object(5)\nmemory usage: 284.5+ KB\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 812 entries, 0 to 811\nData columns (total 51 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Rk      812 non-null    int64  \n 1   Player  812 non-null    object \n 2   Pos     812 non-null    object \n 3   Age     812 non-null    int64  \n 4   Tm      812 non-null    object \n 5   G       812 non-null    int64  \n 6   GS      812 non-null    int64  \n 7   MP      812 non-null    float64\n 8   FG      812 non-null    float64\n 9   FGA     812 non-null    float64\n 10  FG%     797 non-null    float64\n 11  3P      812 non-null    float64\n 12  3PA     812 non-null    float64\n 13  3P%     740 non-null    float64\n 14  2P      812 non-null    float64\n 15  2PA     812 non-null    float64\n 16  2P%     784 non-null    float64\n 17  eFG%    797 non-null    float64\n 18  FT      812 non-null    float64\n 19  FTA     812 non-null    float64\n 20  FT%     715 non-null    float64\n 21  ORB     812 non-null    float64\n 22  DRB     812 non-null    float64\n 23  TRB     812 non-null    float64\n 24  AST     812 non-null    float64\n 25  STL     812 non-null    float64\n 26  BLK     812 non-null    float64\n 27  TOV     812 non-null    float64\n 28  PF      812 non-null    float64\n 29  PTS     812 non-null    float64\n 30  PER     812 non-null    float64\n 31  TS%     799 non-null    float64\n 32  3PAr    797 non-null    float64\n 33  FTr     797 non-null    float64\n 34  ORB%    812 non-null    float64\n 35  DRB%    812 non-null    float64\n 36  TRB%    812 non-null    float64\n 37  AST%    812 non-null    float64\n 38  STL%    812 non-null    float64\n 39  BLK%    812 non-null    float64\n 40  TOV%    799 non-null    float64\n 41  USG%    812 non-null    float64\n 42  OWS     812 non-null    float64\n 43  DWS     812 non-null    float64\n 44  WS      812 non-null    float64\n 45  WS/48   812 non-null    float64\n 46  OBPM    812 non-null    float64\n 47  DBPM    812 non-null    float64\n 48  BPM     812 non-null    float64\n 49  VORP    812 non-null    float64\n 50  height  812 non-null    object \ndtypes: float64(43), int64(4), object(4)\nmemory usage: 323.7+ KB\n","output_type":"stream"},{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"50"},"metadata":{}}]},{"cell_type":"code","source":"txt = \"6-10\"\nprint(txt.split(\"-\"))","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:44.069081Z","iopub.execute_input":"2022-09-25T00:06:44.069557Z","iopub.status.idle":"2022-09-25T00:06:44.075948Z","shell.execute_reply.started":"2022-09-25T00:06:44.069521Z","shell.execute_reply":"2022-09-25T00:06:44.074654Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"['6', '10']\n","output_type":"stream"}]},{"cell_type":"code","source":"#change height from in to cm\nphysique[\"height\"].fillna(\"\")\nheight_list = physique[\"height\"].tolist()\nfor i in range(len(height_list)):\n        text = height_list[i]\n        a = str(text).split(\"-\")\n        if len(a)==1:\n            height_list[i]=(float(a[0])*30.48)\n        else:\n            height_list[i]=(float(a[0])*30.48+float(a[1])*2.54)\nphysique[\"height\"]=height_list\n","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:39:49.035593Z","iopub.execute_input":"2022-09-25T00:39:49.03664Z","iopub.status.idle":"2022-09-25T00:39:49.055783Z","shell.execute_reply.started":"2022-09-25T00:39:49.036591Z","shell.execute_reply":"2022-09-25T00:39:49.054502Z"},"trusted":true},"execution_count":72,"outputs":[]},{"cell_type":"code","source":"namesB = physique[\"name\"].tolist()\ndf = regular.copy()\nnames =df[\"Player\"].tolist()\nfor n in names:\n    if n in namesB:\n        Bindex = namesB.index(n)\n        a= physique.loc[Bindex][4]\n        regular.at[names.index(n),\"height\"] = a\n        \nregular.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:39:50.888001Z","iopub.execute_input":"2022-09-25T00:39:50.888399Z","iopub.status.idle":"2022-09-25T00:39:51.059624Z","shell.execute_reply.started":"2022-09-25T00:39:50.888366Z","shell.execute_reply":"2022-09-25T00:39:51.058422Z"},"trusted":true},"execution_count":73,"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"   Rk             Player Pos  Age   Tm   G  GS    MP   FG   FGA  ...  USG%  \\\n0   1   Precious Achiuwa   C   22  TOR  73  28  23.6  3.6   8.3  ...  18.5   \n1   2       Steven Adams   C   28  MEM  76  75  26.3  2.8   5.1  ...  12.0   \n2   3        Bam Adebayo   C   24  MIA  56  56  32.6  7.3  13.0  ...  25.0   \n3   4       Santi Aldama  PF   21  MEM  32   0  11.3  1.7   4.1  ...  18.4   \n4   5  LaMarcus Aldridge   C   36  BRK  47  12  22.3  5.4   9.7  ...  22.4   \n\n   OWS  DWS   WS  WS/48  OBPM  DBPM  BPM  VORP  height  \n0  0.4  2.1  2.5  0.070  -2.0  -0.6 -2.6  -0.2          \n1  3.8  3.0  6.8  0.163   1.0   1.0  2.0   2.0  213.36  \n2  3.6  3.5  7.2  0.188   1.7   2.1  3.8   2.7  208.28  \n3 -0.1  0.4  0.3  0.044  -4.2  -1.5 -5.7  -0.3          \n4  2.1  1.0  3.1  0.141   1.3  -0.6  0.7   0.7  210.82  \n\n[5 rows x 51 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rk</th>\n      <th>Player</th>\n      <th>Pos</th>\n      <th>Age</th>\n      <th>Tm</th>\n      <th>G</th>\n      <th>GS</th>\n      <th>MP</th>\n      <th>FG</th>\n      <th>FGA</th>\n      <th>...</th>\n      <th>USG%</th>\n      <th>OWS</th>\n      <th>DWS</th>\n      <th>WS</th>\n      <th>WS/48</th>\n      <th>OBPM</th>\n      <th>DBPM</th>\n      <th>BPM</th>\n      <th>VORP</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Precious Achiuwa</td>\n      <td>C</td>\n      <td>22</td>\n      <td>TOR</td>\n      <td>73</td>\n      <td>28</td>\n      <td>23.6</td>\n      <td>3.6</td>\n      <td>8.3</td>\n      <td>...</td>\n      <td>18.5</td>\n      <td>0.4</td>\n      <td>2.1</td>\n      <td>2.5</td>\n      <td>0.070</td>\n      <td>-2.0</td>\n      <td>-0.6</td>\n      <td>-2.6</td>\n      <td>-0.2</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Steven Adams</td>\n      <td>C</td>\n      <td>28</td>\n      <td>MEM</td>\n      <td>76</td>\n      <td>75</td>\n      <td>26.3</td>\n      <td>2.8</td>\n      <td>5.1</td>\n      <td>...</td>\n      <td>12.0</td>\n      <td>3.8</td>\n      <td>3.0</td>\n      <td>6.8</td>\n      <td>0.163</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>213.36</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Bam Adebayo</td>\n      <td>C</td>\n      <td>24</td>\n      <td>MIA</td>\n      <td>56</td>\n      <td>56</td>\n      <td>32.6</td>\n      <td>7.3</td>\n      <td>13.0</td>\n      <td>...</td>\n      <td>25.0</td>\n      <td>3.6</td>\n      <td>3.5</td>\n      <td>7.2</td>\n      <td>0.188</td>\n      <td>1.7</td>\n      <td>2.1</td>\n      <td>3.8</td>\n      <td>2.7</td>\n      <td>208.28</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Santi Aldama</td>\n      <td>PF</td>\n      <td>21</td>\n      <td>MEM</td>\n      <td>32</td>\n      <td>0</td>\n      <td>11.3</td>\n      <td>1.7</td>\n      <td>4.1</td>\n      <td>...</td>\n      <td>18.4</td>\n      <td>-0.1</td>\n      <td>0.4</td>\n      <td>0.3</td>\n      <td>0.044</td>\n      <td>-4.2</td>\n      <td>-1.5</td>\n      <td>-5.7</td>\n      <td>-0.3</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>LaMarcus Aldridge</td>\n      <td>C</td>\n      <td>36</td>\n      <td>BRK</td>\n      <td>47</td>\n      <td>12</td>\n      <td>22.3</td>\n      <td>5.4</td>\n      <td>9.7</td>\n      <td>...</td>\n      <td>22.4</td>\n      <td>2.1</td>\n      <td>1.0</td>\n      <td>3.1</td>\n      <td>0.141</td>\n      <td>1.3</td>\n      <td>-0.6</td>\n      <td>0.7</td>\n      <td>0.7</td>\n      <td>210.82</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 51 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\n\ndef addColumns(setA,setB,attribute):\n    #indexA = setA.columns.get_loc[attribute]\n    #indexB = setB.columns.get_loc[attribute]\n    for n in names:\n        inA = names.index(n)\n        if n in namesB:\n            get_index = namesB.index(n)\n            setA.iloc[inA][50] = setB.iloc[get_index][4]\n        \n        \n\naddColumns(regular,physique,\"height\")","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:22.096001Z","iopub.status.idle":"2022-09-25T00:06:22.096577Z","shell.execute_reply.started":"2022-09-25T00:06:22.096285Z","shell.execute_reply":"2022-09-25T00:06:22.096314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"regular.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:40:51.660824Z","iopub.execute_input":"2022-09-25T00:40:51.661294Z","iopub.status.idle":"2022-09-25T00:40:51.695997Z","shell.execute_reply.started":"2022-09-25T00:40:51.661258Z","shell.execute_reply":"2022-09-25T00:40:51.694856Z"},"trusted":true},"execution_count":76,"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"   Rk             Player Pos  Age   Tm   G  GS    MP   FG   FGA  ...  USG%  \\\n0   1   Precious Achiuwa   C   22  TOR  73  28  23.6  3.6   8.3  ...  18.5   \n1   2       Steven Adams   C   28  MEM  76  75  26.3  2.8   5.1  ...  12.0   \n2   3        Bam Adebayo   C   24  MIA  56  56  32.6  7.3  13.0  ...  25.0   \n3   4       Santi Aldama  PF   21  MEM  32   0  11.3  1.7   4.1  ...  18.4   \n4   5  LaMarcus Aldridge   C   36  BRK  47  12  22.3  5.4   9.7  ...  22.4   \n\n   OWS  DWS   WS  WS/48  OBPM  DBPM  BPM  VORP  height  \n0  0.4  2.1  2.5  0.070  -2.0  -0.6 -2.6  -0.2          \n1  3.8  3.0  6.8  0.163   1.0   1.0  2.0   2.0  213.36  \n2  3.6  3.5  7.2  0.188   1.7   2.1  3.8   2.7  208.28  \n3 -0.1  0.4  0.3  0.044  -4.2  -1.5 -5.7  -0.3          \n4  2.1  1.0  3.1  0.141   1.3  -0.6  0.7   0.7  210.82  \n\n[5 rows x 51 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rk</th>\n      <th>Player</th>\n      <th>Pos</th>\n      <th>Age</th>\n      <th>Tm</th>\n      <th>G</th>\n      <th>GS</th>\n      <th>MP</th>\n      <th>FG</th>\n      <th>FGA</th>\n      <th>...</th>\n      <th>USG%</th>\n      <th>OWS</th>\n      <th>DWS</th>\n      <th>WS</th>\n      <th>WS/48</th>\n      <th>OBPM</th>\n      <th>DBPM</th>\n      <th>BPM</th>\n      <th>VORP</th>\n      <th>height</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Precious Achiuwa</td>\n      <td>C</td>\n      <td>22</td>\n      <td>TOR</td>\n      <td>73</td>\n      <td>28</td>\n      <td>23.6</td>\n      <td>3.6</td>\n      <td>8.3</td>\n      <td>...</td>\n      <td>18.5</td>\n      <td>0.4</td>\n      <td>2.1</td>\n      <td>2.5</td>\n      <td>0.070</td>\n      <td>-2.0</td>\n      <td>-0.6</td>\n      <td>-2.6</td>\n      <td>-0.2</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Steven Adams</td>\n      <td>C</td>\n      <td>28</td>\n      <td>MEM</td>\n      <td>76</td>\n      <td>75</td>\n      <td>26.3</td>\n      <td>2.8</td>\n      <td>5.1</td>\n      <td>...</td>\n      <td>12.0</td>\n      <td>3.8</td>\n      <td>3.0</td>\n      <td>6.8</td>\n      <td>0.163</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>213.36</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Bam Adebayo</td>\n      <td>C</td>\n      <td>24</td>\n      <td>MIA</td>\n      <td>56</td>\n      <td>56</td>\n      <td>32.6</td>\n      <td>7.3</td>\n      <td>13.0</td>\n      <td>...</td>\n      <td>25.0</td>\n      <td>3.6</td>\n      <td>3.5</td>\n      <td>7.2</td>\n      <td>0.188</td>\n      <td>1.7</td>\n      <td>2.1</td>\n      <td>3.8</td>\n      <td>2.7</td>\n      <td>208.28</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Santi Aldama</td>\n      <td>PF</td>\n      <td>21</td>\n      <td>MEM</td>\n      <td>32</td>\n      <td>0</td>\n      <td>11.3</td>\n      <td>1.7</td>\n      <td>4.1</td>\n      <td>...</td>\n      <td>18.4</td>\n      <td>-0.1</td>\n      <td>0.4</td>\n      <td>0.3</td>\n      <td>0.044</td>\n      <td>-4.2</td>\n      <td>-1.5</td>\n      <td>-5.7</td>\n      <td>-0.3</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>LaMarcus Aldridge</td>\n      <td>C</td>\n      <td>36</td>\n      <td>BRK</td>\n      <td>47</td>\n      <td>12</td>\n      <td>22.3</td>\n      <td>5.4</td>\n      <td>9.7</td>\n      <td>...</td>\n      <td>22.4</td>\n      <td>2.1</td>\n      <td>1.0</td>\n      <td>3.1</td>\n      <td>0.141</td>\n      <td>1.3</td>\n      <td>-0.6</td>\n      <td>0.7</td>\n      <td>0.7</td>\n      <td>210.82</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 51 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"regular[\"PER-strat\"] = pd.cut(regular[\"PER\"], bins = [0.,10.0,20.0,30.0,40.0],labels = [5,15,25,35])\nregular[\"PER-strat\"].hist()\n","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:40:54.989163Z","iopub.execute_input":"2022-09-25T00:40:54.989594Z","iopub.status.idle":"2022-09-25T00:40:55.219337Z","shell.execute_reply.started":"2022-09-25T00:40:54.989561Z","shell.execute_reply":"2022-09-25T00:40:55.218007Z"},"trusted":true},"execution_count":77,"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"testing1 = regular.copy()\ntesting[\"height\"] = pd.to_numeric(testing[\"height\"])\nmedian1 = testing1[\"height\"].median()\ntesting1[\"height\"].fillna(median,inplace= True)\ncorr_matrix = regular.corr()\ncorr_matrix[\"PER\"].sort_values(ascending=False)","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:51:51.119589Z","iopub.execute_input":"2022-09-25T00:51:51.120029Z","iopub.status.idle":"2022-09-25T00:51:51.15053Z","shell.execute_reply.started":"2022-09-25T00:51:51.119995Z","shell.execute_reply":"2022-09-25T00:51:51.148823Z"},"trusted":true},"execution_count":88,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36mnanmedian\u001b[0;34m(values, axis, skipna, mask)\u001b[0m\n\u001b[1;32m    719\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 720\u001b[0;31m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"f8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    721\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: ","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_18/3065232118.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtesting1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mregular\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mtesting\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"height\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numeric\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtesting\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"height\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmedian1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtesting1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"height\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mtesting1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"height\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmedian\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mcorr_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mregular\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mmedian\u001b[0;34m(self, axis, skipna, level, numeric_only, **kwargs)\u001b[0m\n\u001b[1;32m  10800\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10801\u001b[0m         ):\n\u001b[0;32m> 10802\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mNDFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmedian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  10803\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10804\u001b[0m         \u001b[0msetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"median\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmedian\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mmedian\u001b[0;34m(self, axis, skipna, level, numeric_only, **kwargs)\u001b[0m\n\u001b[1;32m  10373\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmedian\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m  10374\u001b[0m         return self._stat_function(\n\u001b[0;32m> 10375\u001b[0;31m             \u001b[0;34m\"median\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnanops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnanmedian\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  10376\u001b[0m         )\n\u001b[1;32m  10377\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_stat_function\u001b[0;34m(self, name, func, axis, skipna, level, numeric_only, **kwargs)\u001b[0m\n\u001b[1;32m  10353\u001b[0m             )\n\u001b[1;32m  10354\u001b[0m         return self._reduce(\n\u001b[0;32m> 10355\u001b[0;31m             \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumeric_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnumeric_only\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m  10356\u001b[0m         )\n\u001b[1;32m  10357\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_reduce\u001b[0;34m(self, op, name, axis, skipna, numeric_only, filter_type, **kwds)\u001b[0m\n\u001b[1;32m   4390\u001b[0m                 )\n\u001b[1;32m   4391\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4392\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdelegate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4393\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4394\u001b[0m     def _reindex_indexer(\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36mf\u001b[0;34m(values, axis, skipna, **kwds)\u001b[0m\n\u001b[1;32m    154\u001b[0m                     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0malt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0malt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36mnanmedian\u001b[0;34m(values, axis, skipna, mask)\u001b[0m\n\u001b[1;32m    721\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    722\u001b[0m             \u001b[0;31m# e.g. \"could not convert string to float: 'a'\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 723\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    724\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    725\u001b[0m             \u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: could not convert string to float: "],"ename":"TypeError","evalue":"could not convert string to float: ","output_type":"error"}]},{"cell_type":"code","source":"rtrain,rtest.drop_duplicates(subset=[\"Player\"], keep='last')","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:06:22.104855Z","iopub.status.idle":"2022-09-25T00:06:22.105413Z","shell.execute_reply.started":"2022-09-25T00:06:22.105126Z","shell.execute_reply":"2022-09-25T00:06:22.105154Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"testing = regular.copy()\ntesting = testing.sort_values(by = [\"PER\"],ascending = False)\nprint(testing[\"PER\"][:10])\ntesting.info","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:41:48.175414Z","iopub.execute_input":"2022-09-25T00:41:48.175895Z","iopub.status.idle":"2022-09-25T00:41:48.209959Z","shell.execute_reply.started":"2022-09-25T00:41:48.175854Z","shell.execute_reply":"2022-09-25T00:41:48.208726Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stdout","text":"124    76.2\n183    40.7\n382    38.7\n286    36.9\n391    32.8\n15     32.1\n802    31.2\n206    31.2\n50     29.9\n550    28.6\nName: PER, dtype: float64\n","output_type":"stream"},{"execution_count":79,"output_type":"execute_result","data":{"text/plain":"<bound method DataFrame.info of       Rk           Player Pos  Age   Tm   G  GS    MP    FG   FGA  ...   OWS  \\\n124   99      Ahmad Caver  SG   25  IND   1   0   1.0   1.0   1.0  ...   0.0   \n183  146  Sekou Doumbouya  PF   21  LAL   2   0   8.0   2.5   4.0  ...   0.0   \n382  285      Joe Johnson  SG   40  BOS   1   0   2.0   1.0   1.0  ...   0.0   \n286  220     Jared Harper  PG   24  NOP   5   0   8.6   2.8   5.2  ...   0.3   \n391  290     Nikola Jokić   C   26  DEN  74  74  33.5  10.3  17.7  ...  10.8   \n..   ...              ...  ..  ...  ...  ..  ..   ...   ...   ...  ...   ...   \n525  389      Matt Mooney  SG   24  NYK   1   0   2.0   0.0   1.0  ...  -0.1   \n259  197   Jordan Goodwin  SG   23  WAS   2   0   3.0   0.0   1.5  ...  -0.1   \n577  433    Jaysean Paige  PG   27  DET   1   0   7.0   0.0   3.0  ...  -0.1   \n126  101   Zylan Cheatham  SF   26  UTA   1   0   5.0   0.0   3.0  ...  -0.1   \n319  242      Nate Hinton  SG   22  IND   2   0   1.0   0.0   0.5  ...  -0.1   \n\n     DWS    WS  WS/48  OBPM  DBPM   BPM  VORP  height  PER-strat  \n124  0.0   0.0  1.204  31.0   5.9  36.9   0.0                NaN  \n183  0.1   0.1  0.300   8.8  10.0  18.8   0.1                NaN  \n382  0.0   0.0  0.335  12.1   2.8  15.0   0.0  200.66         35  \n286  0.1   0.4  0.422  14.2   3.1  17.3   0.2                 35  \n391  4.5  15.2  0.296   9.2   4.5  13.7   9.8                 35  \n..   ...   ...    ...   ...   ...   ...   ...     ...        ...  \n525  0.0   0.0 -0.915 -33.9  11.5 -22.3   0.0                NaN  \n259  0.0  -0.1 -0.533 -24.7  -9.4 -34.1   0.0                NaN  \n577  0.0  -0.1 -0.574 -25.0  -6.5 -31.5   0.0                NaN  \n126  0.0  -0.1 -0.610 -19.3 -11.3 -30.6   0.0                NaN  \n319  0.0  -0.1 -1.231 -28.1 -14.5 -42.6   0.0                NaN  \n\n[812 rows x 52 columns]>"},"metadata":{}}]},{"cell_type":"code","source":"testing[\"height\"][:10]","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:41:54.167913Z","iopub.execute_input":"2022-09-25T00:41:54.168321Z","iopub.status.idle":"2022-09-25T00:41:54.177207Z","shell.execute_reply.started":"2022-09-25T00:41:54.168288Z","shell.execute_reply":"2022-09-25T00:41:54.176023Z"},"trusted":true},"execution_count":80,"outputs":[{"execution_count":80,"output_type":"execute_result","data":{"text/plain":"124          \n183          \n382    200.66\n286          \n391          \n15     210.82\n802          \n206    213.36\n50     205.74\n550          \nName: height, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"testing = testing.drop(testing[testing[\"PER\"]>33].index)\ntesting = testing.drop(testing.loc[testing[\"G\"]<5])\ntesting.head(10)","metadata":{"execution":{"iopub.status.busy":"2022-09-25T00:42:42.875894Z","iopub.execute_input":"2022-09-25T00:42:42.876394Z","iopub.status.idle":"2022-09-25T00:42:42.907613Z","shell.execute_reply.started":"2022-09-25T00:42:42.876351Z","shell.execute_reply":"2022-09-25T00:42:42.905903Z"},"trusted":true},"execution_count":82,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_18/3450881090.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtesting\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtesting\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtesting\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtesting\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"PER\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;36m33\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtesting\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtesting\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtesting\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtesting\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"G\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mtesting\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4911\u001b[0m             \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4912\u001b[0m             \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4913\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4914\u001b[0m         )\n\u001b[1;32m   4915\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4148\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4149\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4150\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4152\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors)\u001b[0m\n\u001b[1;32m   4183\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4184\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4185\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4186\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0maxis_name\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnew_axis\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.7/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6015\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6016\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6017\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask]} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6018\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6019\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['Rk' 'Player' 'Pos' 'Age' 'Tm' 'G' 'GS' 'MP' 'FG' 'FGA' 'FG%' '3P' '3PA'\\n '3P%' '2P' '2PA' '2P%' 'eFG%' 'FT' 'FTA' 'FT%' 'ORB' 'DRB' 'TRB' 'AST'\\n 'STL' 'BLK' 'TOV' 'PF' 'PTS' 'PER' 'TS%' '3PAr' 'FTr' 'ORB%' 'DRB%'\\n 'TRB%' 'AST%' 'STL%' 'BLK%' 'TOV%' 'USG%' 'OWS' 'DWS' 'WS' 'WS/48' 'OBPM'\\n 'DBPM' 'BPM' 'VORP' 'height' 'PER-strat'] not found in axis\""],"ename":"KeyError","evalue":"\"['Rk' 'Player' 'Pos' 'Age' 'Tm' 'G' 'GS' 'MP' 'FG' 'FGA' 'FG%' '3P' '3PA'\\n '3P%' '2P' '2PA' '2P%' 'eFG%' 'FT' 'FTA' 'FT%' 'ORB' 'DRB' 'TRB' 'AST'\\n 'STL' 'BLK' 'TOV' 'PF' 'PTS' 'PER' 'TS%' '3PAr' 'FTr' 'ORB%' 'DRB%'\\n 'TRB%' 'AST%' 'STL%' 'BLK%' 'TOV%' 'USG%' 'OWS' 'DWS' 'WS' 'WS/48' 'OBPM'\\n 'DBPM' 'BPM' 'VORP' 'height' 'PER-strat'] not found in axis\"","output_type":"error"}]},{"cell_type":"code","source":"git remote add origin https://github.com/kevinhcn/SSAC.git\ngit branch -M main\ngit push -u origin mainn","metadata":{"execution":{"iopub.status.busy":"2022-09-25T01:17:05.661595Z","iopub.execute_input":"2022-09-25T01:17:05.662109Z","iopub.status.idle":"2022-09-25T01:17:05.670947Z","shell.execute_reply.started":"2022-09-25T01:17:05.662069Z","shell.execute_reply":"2022-09-25T01:17:05.669083Z"},"trusted":true},"execution_count":90,"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_18/465415398.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    git remote add origin https://github.com/kevinhcn/SSAC.git\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (465415398.py, line 1)","output_type":"error"}]}]}